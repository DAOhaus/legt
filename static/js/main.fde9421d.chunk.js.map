{"version":3,"sources":["createPool.js","App.js","reportWebVitals.js","index.js"],"names":["provider","ethers","providers","JsonRpcProvider","poolContract","Contract","IUniswapV3PoolABI","getPoolImmutables","a","Promise","all","factory","token0","token1","fee","tickSpacing","maxLiquidityPerTick","immutables","getPoolState","liquidity","slot0","slot","PoolState","sqrtPriceX96","tick","observationIndex","observationCardinality","observationCardinalityNext","feeProtocol","unlocked","console","log","state","TokenA","Token","TokenB","poolExample","Pool","toString","position","Position","pool","main","pd_api","authMethods","apiKey","App","className","target","href","data-tf-popup","data-tf-size","data-tf-iframe-props","data-tf-medium","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVAKMA,EAAW,IAAIC,IAAOC,UAAUC,gBAAgB,iEAIhDC,EAAe,IAAIH,IAAOI,SAFZ,6CAEkCC,IAAmBN,G,SAG1DO,I,2EAAf,4CAAAC,EAAA,sEACmFC,QAAQC,IAAI,CACvFN,EAAaO,UACbP,EAAaQ,SACbR,EAAaS,SACbT,EAAaU,MACbV,EAAaW,cACbX,EAAaY,wBAPrB,0CACWL,EADX,KACoBC,EADpB,KAC4BC,EAD5B,KACoCC,EADpC,KACyCC,EADzC,KACsDC,EADtD,KAUUC,EAAa,CACfN,UACAC,SACAC,SACAC,MACAC,cACAC,uBAhBR,kBAkBWC,GAlBX,6C,+BAqBeC,I,2EAAf,oCAAAV,EAAA,sEACoCC,QAAQC,IAAI,CAACN,EAAae,YAAaf,EAAagB,UADxF,0CACWD,EADX,KACsBE,EADtB,KAGUC,EAAY,CACdH,YACAI,aAAcF,EAAK,GACnBG,KAAMH,EAAK,GACXI,iBAAkBJ,EAAK,GACvBK,uBAAwBL,EAAK,GAC7BM,2BAA4BN,EAAK,GACjCO,YAAaP,EAAK,GAClBQ,SAAUR,EAAK,IAXvB,kBAcWC,GAdX,4C,kEAiBA,0CAAAd,EAAA,6DACIsB,QAAQC,IAAI,0BADhB,SAEsCtB,QAAQC,IAAI,CAACH,IAAqBW,MAFxE,mCAEWD,EAFX,KAEuBe,EAFvB,KAGUC,EAAS,IAAIC,IAAM,EAAGjB,EAAWL,OAAQ,EAAG,OAAQ,YACpDuB,EAAS,IAAID,IAAM,EAAGjB,EAAWJ,OAAQ,GAAI,OAAQ,iBAErDuB,EAAc,IAAIC,IACpBJ,EACAE,EACAlB,EAAWH,IACXkB,EAAMT,aAAae,WACnBN,EAAMb,UAAUmB,WAChBN,EAAMR,MAEVM,QAAQC,IAAIK,GACNG,EAAW,IAAIC,IAAS,CAC1BC,KAAML,EACNjB,UAA6B,KAAlBa,EAAMb,YAIrBW,QAAQC,IAAIQ,GArBhB,6C,sBAwBeG,M,2DChEOC,sBACpB,CAAEC,YAAa,CAAEC,OAAO,WAAD,OANT,+CA6HDC,MAnHf,WAkFE,OACE,qBAAKC,UAAU,uCAAf,SACE,sBAAKA,UAAU,MAAf,uBAEE,uBACA,oBAAGA,UAAU,wBAAb,oCAEE,uBAFF,kDAKE,uBACA,uBACA,wEACA,oEACA,4DACA,yDACA,qBAAKA,UAAU,QACf,gCACE,mBAAGC,OAAO,QAAQC,KAAK,0BAAvB,SAAiD,0DACjD,qBAAKF,UAAU,QACf,wBAAQG,gBAAc,WAAWC,eAAa,KAAKC,uBAAqB,0BAA0BC,iBAAe,UAAjH,wBACA,qBAAKN,UAAU,QAEf,qBAAKA,UAAU,QACf,wBAAQO,QAlGC,WACjBxB,QAAQC,IAAI,uBACZW,KAgGQ,qCC7GGa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fde9421d.chunk.js","sourcesContent":["import { ethers } from 'ethers'\nimport { Pool, Position } from '@uniswap/v3-sdk'\nimport { Token } from '@uniswap/sdk-core'\nimport { abi as IUniswapV3PoolABI } from '@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json'\n\nconst provider = new ethers.providers.JsonRpcProvider('https://mainnet.infura.io/v3/bbbe8aa60b734044bff6b068004a36db')\n\nconst poolAddress = '0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8'\n\nconst poolContract = new ethers.Contract(poolAddress, IUniswapV3PoolABI, provider)\n\n\nasync function getPoolImmutables() {\n    const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] = await Promise.all([\n        poolContract.factory(),\n        poolContract.token0(),\n        poolContract.token1(),\n        poolContract.fee(),\n        poolContract.tickSpacing(),\n        poolContract.maxLiquidityPerTick(),\n    ])\n\n    const immutables = {\n        factory,\n        token0,\n        token1,\n        fee,\n        tickSpacing,\n        maxLiquidityPerTick,\n    }\n    return immutables\n}\n\nasync function getPoolState() {\n    const [liquidity, slot] = await Promise.all([poolContract.liquidity(), poolContract.slot0()])\n\n    const PoolState = {\n        liquidity,\n        sqrtPriceX96: slot[0],\n        tick: slot[1],\n        observationIndex: slot[2],\n        observationCardinality: slot[3],\n        observationCardinalityNext: slot[4],\n        feeProtocol: slot[5],\n        unlocked: slot[6],\n    }\n\n    return PoolState\n}\n\nasync function main() {\n    console.log('main function accessed')\n    const [immutables, state] = await Promise.all([getPoolImmutables(), getPoolState()])\n    const TokenA = new Token(3, immutables.token0, 6, 'USDC', 'USD Coin')\n    const TokenB = new Token(3, immutables.token1, 18, 'WETH', 'Wrapped Ether')\n\n    const poolExample = new Pool(\n        TokenA,\n        TokenB,\n        immutables.fee,\n        state.sqrtPriceX96.toString(),\n        state.liquidity.toString(),\n        state.tick\n    )\n    console.log(poolExample)\n    const position = new Position({\n        pool: poolExample,\n        liquidity: state.liquidity * 0.0002,\n        // tickLower: nearestUsableTick(state.tick, immutables.tickSpacing) - immutables.tickSpacing * 2,\n        // tickUpper: nearestUsableTick(state.tick, immutables.tickSpacing) + immutables.tickSpacing * 2,\n      })\n    console.log(position)\n}\n\nexport default main\n","import './App.css';\nimport './shorthand.css';\nimport main from './createPool'\nimport * as pd_api from \"pandadoc-node-client\";\n// const API_KEY = process.env.REACT_APP_DOC_API_KEY\nconst API_KEY = \"55d6a0534100d0c9f34bd0e33893f0c3cc133f7b\"\n// const TEMPLATE_UUID = \"SAKV4HSPc8iuY8BNxhS8En\";\nconst TEMPLATE_UUID = \"KDRA3wwKvMGPHXMC6274h4\"\nconst CONTENT_LIBRARY_ITEM_ID = \"vQ5TCsaFfdqBr8bFjmocqT\";\n// const MAX_CHECK_RETRIES = 5;\nconst configuration = pd_api.createConfiguration(\n  { authMethods: { apiKey: `API-Key ${API_KEY}` } }\n);\n\n\nfunction App() {\n\n  const listTemplates = () => {\n    const templates = new pd_api.TemplatesApi(configuration);\n    templates.listTemplates({ deleted: false }).then((data) => {\n      console.log('API called successfully. Returned data: %o', data);\n    }).catch((error) => console.error(error));\n  }\n  const createPool = () => {\n    console.log(\"Pool being created!\")\n    main()\n  }\n  const sendDoc = async() => {\n    const docs = new pd_api.DocumentsApi(configuration);\n    const documentCreateRequest = docs.DocumentCreateRequest = {\n      name: \"API Sample Document from PandaDoc Template\",\n      templateUuid: TEMPLATE_UUID,\n      // specify a folder uuid if you want to document to be created\n      // in specific folder otherwise it will be created in root directory\n      //\n      // folderUuid: \"YOUR_FOLDER_ID\",\n      recipients: [\n        {\n          email: \"josh@example.com\",\n          firstName: \"Josh\",\n          lastName: \"Ron\",\n          role: \"user\",\n          signingOrder: 1,\n        },\n      ],\n      tokens: [\n        {\n          name: \"Favorite.Pet\",\n          value: \"Panda\",\n        },\n      ],\n      fields: {},\n      metadata: {},\n      tags: [\"created_via_api\", \"test_document\"],\n      images: [\n        {\n          urls: [\n            \"https://s3.amazonaws.com/pd-static-content/public-docs/pandadoc-panda-bear.png\",\n          ],\n          name: \"Image 1\",\n        },\n      ],\n      // pricingTables: pricingTables,\n      // contentPlaceholders: [\n      //   {\n      //     blockId: \"Content Placeholder 1\",\n      //     contentLibraryItems: [\n      //       {\n      //         id: CONTENT_LIBRARY_ITEM_ID,\n      //         // pricingTables: pricingTables,\n      //       },\n      //     ],\n      //   },\n      // ],\n      url: \"https://s3.amazonaws.com/pd-static-content/public-docs/pandadoc-panda-bear.png\",\n      parseFormFields: false,\n    };\n    const docToSend = await docs.createDocument({\n      documentCreateRequest: documentCreateRequest,\n    })\n    console.log(docToSend)\n\n    const body = docs.DocumentsApiSendDocumentRequest = {\n      // string | Document ID\n      id: \"SAKV4HSPc8iuY8BNxhS8En\",\n      // DocumentSendRequest\n      documentSendRequest: {\n        message: \"Hello! This document was sent from the PandaDoc API\",\n        subject: \"Please check this test API document from PandaDoc\",\n        silent: true,\n      },\n    };\n\n    docs.sendDocument(body).then((data) => {\n      console.log('API called successfully. Returned data: %o', data);\n    }).catch((error) => console.error(error));\n  }\n  return (\n    <div className=\"full-screen-center text-align-center\">\n      <div className=\"m20\">\n        L Â£ G T\n        <br></br>\n        <p className='text-medium text-gray'>\n          legal governance tokens\n          <br></br>\n          defi protocol\n          collateralizing real world assets\n          <br></br>\n          <br></br>\n          <div>handles real world cataclystic events</div>\n          <div>applies jurisdictional compliance</div>\n          <div>resolve on-chain disputes</div>\n          <div>new financial products</div>\n          <div className=\"m30\"></div>\n          <div>\n            <a target=\"blank\" href=\"https://legt.gitbook.io\"><button>View Documentation</button></a>\n            <div className=\"m10\"></div>\n            <button data-tf-popup=\"FUQh12hl\" data-tf-size=\"70\" data-tf-iframe-props=\"title=Mint Questionaire\" data-tf-medium=\"snippet\" >Start Mint</button>\n            <div className=\"m10\"></div>\n            {/* {/* <button onClick={sendDoc} >Send Doc</button> */}\n            <div className=\"m10\"></div>\n            <button onClick={createPool} >Create Pool</button>\n            \n          </div>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}